fragment ActivityFragment on Activity {
  _id
  name
  emoji
  category
  valueLabel
  valueType
  pointsType
  points
  isArchived
  isWithDescription
  isWidget
  isReverseColors
  isRequired
  rangeMeta {
    from
    to
  }
}

query GetActivity($_id: ID!) {
  activity(_id: $_id) {
    ...ActivityFragment
  }
}

query GetActivities {
  activities {
    ...ActivityFragment
  }
}

fragment GoalFragment on Goal {
  _id
  activityId
  conditionType
  timesPerDuration
  durationType
  failPoints
  successPoints
  lastSyncAt
  isArchived
  activity @client {
    _id
    name
    emoji
  }
}

query GetGoal($_id: ID!) {
  goal(_id: $_id) {
    ...GoalFragment
  }
}

query GetGoals {
  goals {
    ...GoalFragment
  }
}

mutation ArchiveGoal($_id: ID!) {
  archiveGoal(_id: $_id)
}

mutation RestoreGoal($_id: ID!) {
  restoreGoal(_id: $_id)
}

fragment GoalResultFragment on GoalResult {
  _id
  status
  points
  recordedAt
  timesPerDuration
  entries {
    _id
  }
  goal {
    ...GoalFragment
  }
}

query GetCurrentGoalsResults {
  currentGoalsResults {
   ...GoalResultFragment
  }
}

query GetGoalsResults($goalsIds: [ID!], $durationType: DurationType, $dateAfter: Date!, $limit: Int!) {
  goalsResults(goalsIds: $goalsIds, durationType: $durationType, dateAfter: $dateAfter, limit: $limit) {
   ...GoalResultFragment
  }
}

mutation CreateGoal($data: CreateGoalInput!) {
  createGoal(data: $data) {
    _id
  }
}

mutation UpdateGoal($_id: ID!, $data: UpdateGoalInput!) {
  updateGoalById(_id: $_id, data: $data) {
    _id
  }
}

mutation CheckFailedGoalsResults {
  checkFailedGoalsResults
}

query GetActivitiesExtremes {
  activitiesExtremes {
    _id
    min
    max
    valueType
  }
}

fragment EntriesByDayResult on EntriesByDay {
  date
  points
  entries {
    _id
    name
    description
    value
    completedAt
    activityId
    activity @client {
      _id
      name
      emoji
      category
      valueLabel
      valueType
      pointsType
      points
      isArchived
      isWithDescription
      isWidget
      isReverseColors
      isRequired
      rangeMeta {
        from
        to
      }
    }
    goalResults {
      _id
      status
    }
    points
  }
  missing {
    activityId
    activity @client {
      _id
      name
      emoji
      category
      valueLabel
      valueType
      pointsType
      points
      isArchived
      isWithDescription
      isWidget
      isReverseColors
      isRequired
      rangeMeta {
        from
        to
      }
    }
  }
}

query GetEntriesByDay($dateAfter: Date) {
  entriesByDay(dateAfter: $dateAfter) {
    ...EntriesByDayResult
  }
}

query GetJournal($dateAfter: Date, $daysLimit: Int!, $activities: [String!]) {
  journal(dateAfter: $dateAfter, daysLimit: $daysLimit, activities: $activities) {
    date
    points
    entries {
      _id
      completedAt
      description
      activityId
      value
    }
  }
}

query GetCalendarDays($dateAfter: Date, $dateBefore: Date, $activityId: ID) {
  entriesByDay(dateAfter: $dateAfter, dateBefore: $dateBefore, activityId: $activityId) {
    date
    points
    entries {
      _id
      value
      activityId
    }
  }
}

query GetEntriesByOneDay($date: Date!) {
  entriesByOneDay(date: $date) {
    ...EntriesByDayResult
  }
}

query GetBalance($dateAfter: Date) {
  balance(dateAfter: $dateAfter) {
    total
    year
    month
    week
  }
}

query GetDaysStatistic {
  daysStatistic {
    missing
    streak
    total
  }
}

fragment EntryPerDateFragment on EntryPerDate {
  averageValue
  completedAt
  count
  valueSum
}

fragment ActivityBaseStatisticFragment on ActivityBaseStatistic {
  _id
  dateAfterKey
  activity @client {
    name
    emoji
    valueType
    isRequired
    isReverseColors
  }
  total
  perWeek
  medianValue
  averageValue
  streakWith {
    count
    from
    to
  }
  streakWithout {
    count
    from
    to
  }
}

query GetActivitiesStatistic($dateAfter: Date, $dateBefore: Date) {
  activitiesStatistic(dateAfter: $dateAfter, dateBefore: $dateBefore) {
    ...ActivityBaseStatisticFragment
  }
}

query GetActivityStatistic($activityId: String!, $dateAfter: Date, $dateBefore: Date) {
  activityBaseStatistic(
    activityId: $activityId
    dateAfter: $dateAfter
    dateBefore: $dateBefore
  ) {
    ...ActivityBaseStatisticFragment
  }

  activityAdvancedStatistic(
    activityId: $activityId
    dateAfter: $dateAfter
    dateBefore: $dateBefore
  ) {
    _id
    dateAfterKey
    activity @client {
      name
      emoji
      valueType
      isRequired
      isReverseColors
    }
    weekdays {
      weekday
      count
      valueSum
      averageValue
    }
    countPerValue {
      count
      value
    }
    entriesPerDateGroup {
      week {
        ...EntryPerDateFragment
      }
      month {
        ...EntryPerDateFragment
      }
    }
  }
}

query GetReminder {
  reminder {
    _id
    remindAt
    isRepeating
  }
}

query GetPushTokens {
  pushTokens {
    _id
    token
    userId
  }
}

mutation CreateActivity($data: CreateActivityInput!) {
  createActivity(data: $data) {
    _id
  }
}

mutation UpdateActivity($_id: ID!, $data: UpdateActivityInput!) {
  updateActivityById(_id: $_id, data: $data) {
    _id
  }
}

mutation ArchiveActivity($_id: ID!) {
  archiveActivity(_id: $_id)
}

mutation RestoreActivity($_id: ID!) {
  restoreActivity(_id: $_id)
}

mutation CreateEntry($data: CreateEntryInput!) {
  createEntry(data: $data) {
    _id
  }
}

mutation UpdateEntry($_id: ID!, $data: UpdateEntryInput!) {
  updateEntryById(_id: $_id, data: $data) {
    _id
  }
}

mutation DeleteEntry($_id: ID!) {
  deleteEntry(_id: $_id)
}

mutation ConnectTodoist($authCode: String!) {
  connectTodoist(authCode: $authCode) {
    _id
  }
}

mutation UpsertReminder($data: ReminderInput!) {
  upsertReminder(data: $data) {
    _id
    createdAt
    remindAt
    isRepeating
    userId
  }
}

mutation UpsertPushToken($data: PushTokenUpsertInput!) {
  upsertPushToken(data: $data) {
    _id
    userId
    token
  }
}

query GetTodoistActivity {
  todoistActivity @client {
    ...ActivityFragment
  }
}

query GetPaymentUrl($callbackUrl: String!) {
  paymentUrl(callbackUrl: $callbackUrl)
}

query GetActiveSubscription {
  activeSubscription {
    _id
    productId
    status
    platform
  }
}

mutation CancelSubscription($_id: ID!) {
  cancelSubscription(_id: $_id)
}

mutation PrepareUploadRequest {
  prepareUploadRequest {
    url
    fields
  }
}
