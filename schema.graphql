type Activity {
  _id: ID!
  name: String!
  emoji: String!
  userId: String!
  valueLabel: String
  valueType: ActivityType!
  pointsType: PointsType!
  category: ActivityCategory!
  points: Float!
  rangeMeta: RangeMeta
  todoistMeta: TodoistMeta
  createdAt: Date!
  isArchived: Boolean!
  isWithDescription: Boolean!
  isWidget: Boolean!
  isReverseColors: Boolean!
  isRequired: Boolean!
  dateIsRequiredSet: Date!
}

type ActivityAdvancedStatistic {
  _id: ID!
  dateAfterKey: String!
  weekdays: [WeekdayStatistic!]!
  countPerValue: [CountPerValue!]
  entriesPerDateGroup: EntriesPerDateGroup!
}

type ActivityBaseStatistic {
  _id: ID!
  dateAfterKey: String!
  perWeek: Float
  total: Int!
  medianValue: Float
  averageValue: Float
  streakWithout: Streak!
  streakWith: Streak!
}

enum ActivityCategory {
  Neutral
  Positive
  Negative
}

type ActivityExtremes {
  _id: ID!
  min: Float
  max: Float
  valueType: ActivityType!
}

enum ActivityType {
  Simple
  Value
  Range
  Todoist
}

type Balance {
  total: Int!
  year: Int!
  month: Int!
  week: Int!
}

enum ConditionType {
  LessOrEqual
  GreaterOrEqual
}

type CountPerValue {
  value: Int!
  count: Int!
}

input CreateActivityInput {
  _id: ID
  name: String!
  emoji: String!
  valueLabel: String
  valueType: ActivityType!
  pointsType: PointsType!
  category: ActivityCategory!
  points: Float!
  rangeMeta: RangeMetaInput
  todoistMeta: TodoistMetaInput
  isWithDescription: Boolean
  isWidget: Boolean
  isReverseColors: Boolean
  isRequired: Boolean
  dateIsRequiredSet: Date
}

input CreateEntryInput {
  _id: ID
  description: String
  completedAt: Date!
  activityId: ID!
  value: Float
}

input CreateGoalInput {
  activityId: ID!
  conditionType: ConditionType!
  durationType: DurationType!
  timesPerDuration: Int!
  successPoints: Float
  failPoints: Float
  lastSyncAt: Date!
}

"""Date custom scalar type"""
scalar Date

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type DaysStatistic {
  total: Int!
  missing: Int!
  streak: Int!
}

enum DurationType {
  Week
  Month
}

type EntriesByDay {
  date: Date!
  points: Float!
  entries: [Entry!]!
  missing: [EntryMissing!]!
}

type EntriesPerDateGroup {
  week: [EntryPerDate!]!
  month: [EntryPerDate!]!
}

type Entry {
  _id: ID!
  userId: String!
  description: String
  completedAt: Date!
  activityId: ID!
  points: Float!
  value: Float
  goalResultsIds: [ID]!
}

type EntryMissing {
  activityId: ID!
}

type EntryPerDate {
  valueSum: Float
  averageValue: Float
  count: Int!
  completedAt: String!
}

type Goal {
  _id: ID!
  userId: String!
  activityId: ID!
  activity: Activity!
  conditionType: ConditionType!
  durationType: DurationType!
  timesPerDuration: Int!
  successPoints: Float
  failPoints: Float
  negativeFailPoints: Float
  lastSyncAt: Date!
  isArchived: Boolean!
}

type GoalResult {
  _id: ID!
  userId: String!
  goalId: ID!
  goal: Goal!
  entries: [Entry!]!
  recordedAt: Date!
  status: GoalResultStatus!
  points: Float!
  timesPerDuration: Int!
}

enum GoalResultStatus {
  Pending
  Completed
  Failed
}

type Journal {
  date: Date!
  points: Float!
  entries: [Entry!]!
}

type Mutation {
  upsertPushToken(data: PushTokenUpsertInput!): PushToken!
  upsertReminder(data: ReminderInput!): Reminder!
  createActivity(data: CreateActivityInput!): Activity!
  updateActivityById(_id: ID!, data: UpdateActivityInput!): Activity!
  archiveActivity(_id: ID!): Boolean!
  restoreActivity(_id: ID!): Boolean!
  createGoal(data: CreateGoalInput!): Goal!
  updateGoalById(_id: ID!, data: UpdateGoalInput!): Goal!
  archiveGoal(_id: ID!): Boolean!
  restoreGoal(_id: ID!): Boolean!
  checkFailedGoalsResults: Boolean!
  createEntry(data: CreateEntryInput!): Entry!
  updateEntryById(_id: ID!, data: UpdateEntryInput!): Entry!
  deleteEntry(_id: ID!): String
  connectTodoist(authCode: String!): Activity!
  cancelSubscription(_id: ID!): Boolean!
}

type PaidSubscription {
  _id: String!
  userId: String!
  productId: String!
  subscriptionId: String
  platform: SubscriptionPlatform!
  status: SubscriptionStatus!
  expireAt: Date
}

enum PointsType {
  Const
  Linear
}

type PushToken {
  _id: ID!
  token: String!
  userId: String!
}

input PushTokenUpsertInput {
  token: String!
}

type Query {
  pushTokens: [PushToken!]!
  reminder: Reminder
  entry(_id: ID!): Entry
  entries: [Entry!]!
  entriesByOneDay(date: Date!): EntriesByDay
  entriesByDay(dateAfter: Date, dateBefore: Date, activityId: ID): [EntriesByDay!]!
  daysStatistic: DaysStatistic!
  activity(_id: ID!): Activity
  activities: [Activity!]!
  activitiesExtremes: [ActivityExtremes!]!
  goals: [Goal!]!
  goal(_id: ID!): Goal
  currentGoalsResults: [GoalResult!]!
  goalsResults(dateAfter: Date!, limit: Int!, goalsIds: [ID!], durationType: DurationType): [GoalResult!]!
  activitiesStatistic(dateAfter: Date, dateBefore: Date): [ActivityBaseStatistic!]!
  activityBaseStatistic(activityId: String!, dateAfter: Date, dateBefore: Date): ActivityBaseStatistic!
  activityAdvancedStatistic(activityId: String!, dateAfter: Date, dateBefore: Date): ActivityAdvancedStatistic
  journal(dateAfter: Date, daysLimit: Int!, activities: [String!]): [Journal!]!
  balance(dateAfter: Date): Balance!
  paymentUrl(callbackUrl: String!): String!
  subscription(platform: SubscriptionPlatform): PaidSubscription
  activeSubscription: PaidSubscription
}

type RangeMeta {
  from: Int!
  to: Int!
}

input RangeMetaInput {
  from: Int!
  to: Int!
}

type Reminder {
  _id: ID!
  createdAt: DateTime!
  isRepeating: Boolean!
  remindAt: DateTime!
  userId: String!
}

input ReminderInput {
  _id: ID
  isRepeating: Boolean
  remindAt: DateTime!
}

type Streak {
  count: Int!
  from: String
  to: String
}

type Subscription {
  entryUpdated: Boolean
}

enum SubscriptionPlatform {
  AppStore
  GooglePlay
  Fondy
  Granted
}

enum SubscriptionStatus {
  NotSubscribed
  Pending
  Subscribed
  Expired
}

type TodoistMeta {
  todoistUserId: String!
}

input TodoistMetaInput {
  todoistUserId: String!
}

input UpdateActivityInput {
  name: String
  emoji: String
  valueLabel: String
  valueType: ActivityType
  pointsType: PointsType
  category: ActivityCategory
  points: Float
  rangeMeta: RangeMetaInput
  todoistMeta: TodoistMetaInput
  isWithDescription: Boolean
  isWidget: Boolean
  isReverseColors: Boolean
  isRequired: Boolean
  dateIsRequiredSet: Date
}

input UpdateEntryInput {
  description: String
  completedAt: Date
  value: Float
}

input UpdateGoalInput {
  activityId: ID
  conditionType: String
  durationType: String
  timesPerDuration: Int
  successPoints: Float
  failPoints: Float
  lastSyncAt: Date
}

type WeekdayStatistic {
  weekday: Int!
  count: Int!
  valueSum: Float!
  averageValue: Float
}

